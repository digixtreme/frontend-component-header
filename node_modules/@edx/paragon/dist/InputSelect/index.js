const _excluded = ["className", "inputRef"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import PropTypes from 'prop-types';
import asInput from '../asInput';
import withDeprecatedProps, { DeprTypes } from '../withDeprecatedProps';
class Select extends React.Component {
  static getOption(option, i) {
    const {
      disabled
    } = option;
    let {
      label,
      value
    } = option;
    if (typeof option === 'string') {
      label = option;
      value = option;
    }
    return /*#__PURE__*/React.createElement("option", {
      key: `option-${i}`,
      value: value,
      disabled: disabled
    }, label);
  }
  getOptions() {
    return this.props.options.map((option, i) => {
      let section;
      if (option.options) {
        const groupOpts = option.options.map((opt, j) => Select.getOption(opt, j));
        section = /*#__PURE__*/React.createElement("optgroup", {
          label: option.label,
          key: option.label
        }, groupOpts);
      } else {
        section = Select.getOption(option, i);
      }
      return section;
    });
  }
  render() {
    const _this$props = this.props,
      {
        className,
        inputRef
      } = _this$props,
      others = _objectWithoutProperties(_this$props, _excluded);
    const options = this.getOptions();
    return /*#__PURE__*/React.createElement("select", _extends({}, others, {
      className: className,
      type: "select",
      ref: inputRef
    }), options);
  }
}
Select.propTypes = {
  className: PropTypes.string,
  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
    current: PropTypes.instanceOf(PropTypes.element)
  })]),
  options: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.arrayOf(PropTypes.shape({}))]).isRequired
};
Select.defaultProps = {
  className: undefined,
  inputRef: undefined
};
const InputSelect = asInput(withDeprecatedProps(Select, 'InputSelect', {
  className: {
    deprType: DeprTypes.FORMAT,
    expect: value => typeof value === 'string',
    transform: value => Array.isArray(value) ? value.join(' ') : value,
    message: 'It should be a string.'
  }
}));
export default InputSelect;
//# sourceMappingURL=index.js.map