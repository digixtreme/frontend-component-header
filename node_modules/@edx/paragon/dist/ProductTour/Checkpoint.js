const _excluded = ["body", "index", "placement", "target", "title", "totalCheckpoints"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect, useState } from 'react';
import { useMediaQuery } from 'react-responsive';
import PropTypes from 'prop-types';
import { createPopper } from '@popperjs/core';
import breakpoints from '../utils/breakpoints';
import CheckpointActionRow from './CheckpointActionRow';
import CheckpointBody from './CheckpointBody';
import CheckpointBreadcrumbs from './CheckpointBreadcrumbs';
import CheckpointTitle from './CheckpointTitle';
const Checkpoint = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      body,
      index,
      placement,
      target,
      title,
      totalCheckpoints
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const [checkpointVisible, setCheckpointVisible] = useState(false);
  const isMobile = useMediaQuery({
    maxWidth: breakpoints.small.maxWidth
  });
  useEffect(() => {
    const targetElement = document.querySelector(target);
    const checkpoint = document.querySelector('#pgn__checkpoint');
    if (targetElement && checkpoint) {
      // Use the Popper library to translate the Checkpoint to its target's coordinates
      const checkpointPopper = createPopper(targetElement, checkpoint, {
        placement: isMobile ? 'top' : placement,
        modifiers: [{
          name: 'arrow',
          options: {
            padding: 25
          }
        }, {
          name: 'offset',
          options: {
            offset: [0, 20]
          }
        }, {
          name: 'preventOverflow',
          options: {
            padding: 20,
            tetherOffset: 35
          }
        }]
      });
      setCheckpointVisible(true);
      if (checkpointPopper) {
        checkpointPopper.forceUpdate();
      }
    }
  }, [target, isMobile, placement]);
  useEffect(() => {
    if (checkpointVisible) {
      // Scroll the Checkpoint into view once its rendered
      const targetElement = document.querySelector(target);
      let targetOffset = targetElement.getBoundingClientRect().top;
      if (targetOffset < 0 || targetElement.getBoundingClientRect().bottom > global.innerHeight) {
        if (placement.includes('top')) {
          if (targetOffset < 0) {
            targetOffset *= -1;
          }
          targetOffset -= 280;
        } else {
          targetOffset -= 80;
        }
        global.scrollTo({
          top: targetOffset,
          behavior: 'smooth'
        });
      }
      const button = document.querySelector('.pgn__checkpoint-button_advance');
      button.focus();
    }
  }, [target, checkpointVisible, placement]);
  const isLastCheckpoint = index + 1 === totalCheckpoints;
  const isOnlyCheckpoint = totalCheckpoints === 1;
  return /*#__PURE__*/React.createElement("div", {
    id: "pgn__checkpoint",
    className: "pgn__checkpoint",
    "aria-labelledby": "pgn__checkpoint-title",
    ref: ref,
    role: "dialog",
    style: {
      visibility: checkpointVisible ? 'visible' : 'hidden',
      pointerEvents: checkpointVisible ? 'auto' : 'none'
    }
  }, /*#__PURE__*/React.createElement("span", {
    className: "sr-only"
  }, "Top of step ", index + 1), (title || !isOnlyCheckpoint) && /*#__PURE__*/React.createElement("div", {
    className: "pgn__checkpoint-header"
  }, /*#__PURE__*/React.createElement(CheckpointTitle, null, title), /*#__PURE__*/React.createElement(CheckpointBreadcrumbs, {
    currentIndex: index,
    totalCheckpoints: totalCheckpoints
  })), /*#__PURE__*/React.createElement(CheckpointBody, null, body), /*#__PURE__*/React.createElement(CheckpointActionRow, _extends({
    isLastCheckpoint: isLastCheckpoint,
    index: index
  }, props)), /*#__PURE__*/React.createElement("div", {
    id: "pgn__checkpoint-arrow",
    "data-popper-arrow": true
  }), /*#__PURE__*/React.createElement("span", {
    className: "sr-only"
  }, "Bottom of step ", index + 1));
});
Checkpoint.defaultProps = {
  advanceButtonText: null,
  body: null,
  dismissButtonText: null,
  endButtonText: null,
  placement: 'top',
  title: null,
  showDismissButton: undefined
};
Checkpoint.propTypes = {
  /** The text displayed on the button used to advance the tour for the given Checkpoint. */
  advanceButtonText: PropTypes.node,
  /** The text displayed in the body of the Checkpoint */
  body: PropTypes.node,
  /** The text displayed on the button used to dismiss the tour for the given Checkpoint. */
  dismissButtonText: PropTypes.node,
  /** The text displayed on the button used to end the tour for the given Checkpoint. */
  endButtonText: PropTypes.node,
  /** The current index of the given Checkpoint */
  index: PropTypes.number.isRequired,
  /** A function that runs when triggering the `onClick` event of the advance
   * button for the given Checkpoint. */
  onAdvance: PropTypes.func.isRequired,
  /** A function that runs when triggering the `onClick` event of the dismiss
   * button for the given Checkpoint. */
  onDismiss: PropTypes.func.isRequired,
  /** A function that runs when triggering the `onClick` event of the advance
   * button if the given Checkpoint is the only or last Checkpoint in a tour. */
  onEnd: PropTypes.func.isRequired,
  /** A string that dictates the alignment of the Checkpoint around its target. */
  placement: PropTypes.oneOf(['top', 'top-start', 'top-end', 'right-start', 'right', 'right-end', 'left-start', 'left', 'left-end', 'bottom', 'bottom-start', 'bottom-end']),
  /** The CSS selector for the Checkpoint's desired target. */
  target: PropTypes.string.isRequired,
  /** The text displayed in the title of the Checkpoint */
  title: PropTypes.node,
  /** The total number of Checkpoints in a tour */
  totalCheckpoints: PropTypes.number.isRequired,
  /** Enforces visibility of the dismiss button under all circumstances */
  showDismissButton: PropTypes.bool
};
export default Checkpoint;
//# sourceMappingURL=Checkpoint.js.map