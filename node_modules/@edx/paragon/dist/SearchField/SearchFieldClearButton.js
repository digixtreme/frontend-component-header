function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useContext } from 'react';
import { SearchFieldContext } from './SearchFieldAdvanced';
function SearchFieldClearButton(props) {
  const {
    screenReaderText,
    icons,
    value,
    disabled,
    refs
  } = useContext(SearchFieldContext);
  if (!value) {
    return null;
  }
  const handleClick = () => {
    if (refs.input.current) {
      refs.input.current.focus();
    }
  };
  return (
    /*#__PURE__*/
    // eslint-disable-next-line react/button-has-type
    React.createElement("button", _extends({
      type: "reset",
      className: "btn",
      disabled: disabled,
      onClick: handleClick
    }, props), icons.clear, /*#__PURE__*/React.createElement("span", {
      className: "sr-only"
    }, screenReaderText.clearButton))
  );
}
export default SearchFieldClearButton;
//# sourceMappingURL=SearchFieldClearButton.js.map