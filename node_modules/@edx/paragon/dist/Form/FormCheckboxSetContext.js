function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { useContext } from 'react';
import PropTypes from 'prop-types';
import { callAllHandlers } from './fieldUtils';
const identityFn = props => props;
const FormCheckboxSetContext = /*#__PURE__*/React.createContext({
  getCheckboxControlProps: identityFn,
  hasCheckboxSetProvider: false
});
const useCheckboxSetContext = () => useContext(FormCheckboxSetContext);
function FormCheckboxSetContextProvider(_ref) {
  let {
    children,
    name,
    onBlur,
    onFocus,
    onChange,
    value,
    defaultValue
  } = _ref;
  const isControlled = !defaultValue && Array.isArray(value);
  const getCheckboxControlProps = checkboxProps => _objectSpread(_objectSpread({}, checkboxProps), {}, {
    name,
    /* istanbul ignore next */
    onBlur: checkboxProps.onBlur ? callAllHandlers(onBlur, checkboxProps.onBlur) : onBlur,
    /* istanbul ignore next */
    onFocus: checkboxProps.onFocus ? callAllHandlers(onFocus, checkboxProps.onFocus) : onFocus,
    /* istanbul ignore next */
    onChange: checkboxProps.onChange ? callAllHandlers(onChange, checkboxProps.onChange) : onChange,
    checked: isControlled ? value.includes(checkboxProps.value) : undefined,
    defaultChecked: isControlled ? undefined : defaultValue && defaultValue.includes(checkboxProps.value)
  });
  const contextValue = {
    name,
    value,
    defaultValue,
    getCheckboxControlProps,
    onBlur,
    onFocus,
    onChange,
    hasCheckboxSetProvider: true
  };
  return /*#__PURE__*/React.createElement(FormCheckboxSetContext.Provider, {
    value: contextValue
  }, children);
}
FormCheckboxSetContextProvider.propTypes = {
  children: PropTypes.node.isRequired,
  name: PropTypes.string,
  onBlur: PropTypes.func,
  onFocus: PropTypes.func,
  onChange: PropTypes.func,
  value: PropTypes.arrayOf(PropTypes.string),
  defaultValue: PropTypes.arrayOf(PropTypes.string)
};
FormCheckboxSetContextProvider.defaultProps = {
  onBlur: undefined,
  name: undefined,
  onFocus: undefined,
  onChange: undefined,
  value: undefined,
  defaultValue: undefined
};
export default FormCheckboxSetContext;
export { useCheckboxSetContext, FormCheckboxSetContextProvider };
//# sourceMappingURL=FormCheckboxSetContext.js.map