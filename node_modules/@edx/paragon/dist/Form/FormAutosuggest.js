const _excluded = ["children", "arrowKeyNavigationSelector", "ignoredArrowKeysNames", "screenReaderText", "value", "isLoading", "errorMessageText", "onChange", "onSelected", "helpMessage"],
  _excluded2 = ["children", "onClick"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import { useIntl } from 'react-intl';
import { KeyboardArrowUp, KeyboardArrowDown } from '../../icons';
import Icon from '../Icon';
import FormGroup from './FormGroup';
import FormControl from './FormControl';
import FormControlFeedback from './FormControlFeedback';
import IconButton from '../IconButton';
import Spinner from '../Spinner';
import useArrowKeyNavigation from '../hooks/useArrowKeyNavigation';
import messages from './messages';
function FormAutosuggest(_ref) {
  let {
      children,
      arrowKeyNavigationSelector,
      ignoredArrowKeysNames,
      screenReaderText,
      value,
      isLoading,
      errorMessageText,
      onChange,
      onSelected,
      helpMessage
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const intl = useIntl();
  const parentRef = useArrowKeyNavigation({
    selectors: arrowKeyNavigationSelector,
    ignoredKeys: ignoredArrowKeysNames
  });
  const [isMenuClosed, setIsMenuClosed] = useState(true);
  const [state, setState] = useState({
    displayValue: value || '',
    errorMessage: '',
    dropDownItems: []
  });
  const setValue = (itemValue, optValue) => {
    if (value === itemValue) {
      return;
    }
    if (onSelected) {
      onSelected(itemValue);
    }
    if (optValue !== state.displayValue) {
      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
        displayValue: optValue
      }));
    }
  };
  const handleItemClick = (e, optValue, onClick) => {
    setValue(e.target.value, optValue);
    setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
      dropDownItems: ''
    }));
    setIsMenuClosed(true);
    if (onClick) {
      onClick(e);
    }
  };
  function getItems() {
    let strToFind = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
    let childrenOpt = React.Children.map(children, child => {
      // eslint-disable-next-line no-shadow
      const _child$props = child.props,
        {
          children,
          onClick
        } = _child$props,
        rest = _objectWithoutProperties(_child$props, _excluded2);
      const modifiedOpt = /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, rest), {}, {
        children,
        value: children,
        onClick: e => handleItemClick(e, children, onClick)
      }));
      return modifiedOpt;
    });
    if (strToFind.length > 0) {
      childrenOpt = childrenOpt.filter(opt => opt.props.children.toLowerCase().includes(strToFind.toLowerCase()));
    }
    return childrenOpt;
  }
  const handleExpand = e => {
    setIsMenuClosed(!isMenuClosed);
    const newState = {
      dropDownItems: []
    };
    if (isMenuClosed) {
      newState.dropDownItems = getItems(e.target.value);
      newState.errorMessage = '';
    }
    setState(prevState => _objectSpread(_objectSpread({}, prevState), newState));
  };
  const iconToggle = /*#__PURE__*/React.createElement(IconButton, {
    className: "pgn__form-autosuggest__icon-button",
    src: isMenuClosed ? KeyboardArrowDown : KeyboardArrowUp,
    iconAs: Icon,
    size: "sm",
    variant: "secondary",
    alt: isMenuClosed ? intl.formatMessage(messages.iconButtonOpened) : intl.formatMessage(messages.iconButtonClosed),
    onClick: e => handleExpand(e, isMenuClosed)
  });
  const handleClickOutside = e => {
    if (parentRef.current && !parentRef.current.contains(e.target) && state.dropDownItems.length > 0) {
      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
        dropDownItems: '',
        errorMessage: !state.displayValue ? errorMessageText : ''
      }));
      setIsMenuClosed(true);
    }
  };
  const keyDownHandler = e => {
    if (e.key === 'Escape') {
      e.preventDefault();
      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
        dropDownItems: '',
        errorMessage: !state.displayValue ? errorMessageText : ''
      }));
      setIsMenuClosed(true);
    }
  };
  useEffect(() => {
    document.addEventListener('keydown', keyDownHandler);
    document.addEventListener('click', handleClickOutside, true);
    return () => {
      document.removeEventListener('click', handleClickOutside, true);
      document.removeEventListener('keydown', keyDownHandler);
    };
  });
  const setDisplayValue = itemValue => {
    const optValue = [];
    children.forEach(opt => {
      optValue.push(opt.props.children);
    });
    const normalized = itemValue.toLowerCase();
    const opt = optValue.find(o => o.toLowerCase() === normalized);
    if (opt) {
      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
        displayValue: opt
      }));
    } else {
      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
        displayValue: itemValue
      }));
    }
  };
  const handleClick = e => {
    const dropDownItems = getItems(e.target.value);
    if (dropDownItems.length > 1) {
      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
        dropDownItems,
        errorMessage: ''
      }));
      setIsMenuClosed(false);
    }
  };
  const handleOnChange = e => {
    const findStr = e.target.value;
    if (onChange) {
      onChange(findStr);
    }
    if (findStr.length) {
      const filteredItems = getItems(findStr);
      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
        dropDownItems: filteredItems,
        errorMessage: ''
      }));
      setIsMenuClosed(false);
    } else {
      setState(prevState => _objectSpread(_objectSpread({}, prevState), {}, {
        dropDownItems: '',
        errorMessageText
      }));
      setIsMenuClosed(true);
    }
    setDisplayValue(e.target.value);
  };
  return /*#__PURE__*/React.createElement("div", {
    className: "pgn__form-autosuggest__wrapper",
    ref: parentRef
  }, /*#__PURE__*/React.createElement(FormGroup, {
    isInvalid: !!state.errorMessage
  }, /*#__PURE__*/React.createElement(FormControl, _extends({
    "aria-expanded": (state.dropDownItems.length > 0).toString(),
    "aria-owns": "pgn__form-autosuggest__dropdown-box",
    value: state.displayValue,
    "aria-invalid": state.errorMessage,
    onChange: handleOnChange,
    onClick: handleClick,
    trailingElement: iconToggle
  }, props)), helpMessage && !state.errorMessage && /*#__PURE__*/React.createElement(FormControlFeedback, {
    type: "default"
  }, helpMessage), state.errorMessage && /*#__PURE__*/React.createElement(FormControlFeedback, {
    type: "invalid",
    "feedback-for": props.name
  }, errorMessageText)), /*#__PURE__*/React.createElement("div", {
    id: "pgn__form-autosuggest__dropdown-box",
    className: "pgn__form-autosuggest__dropdown"
  }, isLoading ? /*#__PURE__*/React.createElement("div", {
    className: "pgn__form-autosuggest__dropdown-loading"
  }, /*#__PURE__*/React.createElement(Spinner, {
    animation: "border",
    variant: "dark",
    screenReaderText: screenReaderText
  })) : state.dropDownItems.length > 0 && state.dropDownItems));
}
FormAutosuggest.defaultProps = {
  arrowKeyNavigationSelector: 'a:not(:disabled),button:not(:disabled, .btn-icon),input:not(:disabled)',
  ignoredArrowKeysNames: ['ArrowRight', 'ArrowLeft'],
  isLoading: false,
  role: 'list',
  className: null,
  floatingLabel: null,
  onChange: null,
  onSelected: null,
  helpMessage: '',
  placeholder: '',
  value: null,
  errorMessageText: null,
  readOnly: false,
  children: null,
  name: 'form-autosuggest',
  screenReaderText: 'loading'
};
FormAutosuggest.propTypes = {
  /**
   * Specifies the CSS selector string that indicates to which elements
   * the user can navigate using the arrow keys
  */
  arrowKeyNavigationSelector: PropTypes.string,
  /** Specifies ignored hook keys. */
  ignoredArrowKeysNames: PropTypes.arrayOf(PropTypes.string),
  /** Specifies loading state. */
  isLoading: PropTypes.bool,
  /** An ARIA role describing the form autosuggest. */
  role: PropTypes.string,
  /** Specifies class name to append to the base element. */
  className: PropTypes.string,
  /** Specifies floating label to display for the input component. */
  floatingLabel: PropTypes.string,
  /** Specifies onChange event handler. */
  onChange: PropTypes.func,
  /** Specifies help information for the user. */
  helpMessage: PropTypes.string,
  /** Specifies the placeholder text for the input. */
  placeholder: PropTypes.string,
  /** Specifies values for the input. */
  value: PropTypes.string,
  /** Informs user has errors. */
  errorMessageText: PropTypes.string,
  /** Specifies the name of the base input element. */
  name: PropTypes.string,
  /** Selected list item is read-only. */
  readOnly: PropTypes.bool,
  /** Specifies the content of the `FormAutosuggest`. */
  children: PropTypes.node,
  /** Specifies the screen reader text */
  screenReaderText: PropTypes.string,
  /** Function that receives the selected value. */
  onSelected: PropTypes.func
};
export default FormAutosuggest;
//# sourceMappingURL=FormAutosuggest.js.map