import React, { useState, useMemo } from 'react';
import PropTypes from 'prop-types';
import { useOverflowScroll } from './data';
import OverflowScrollContext from './OverflowScrollContext';
import OverflowScrollItems from './OverflowScrollItems';
function OverflowScroll(_ref) {
  let {
    ariaLabel,
    children,
    childQuerySelector,
    hasInteractiveChildren,
    disableScroll,
    disableOpacityMasks,
    onScrollPrevious,
    onScrollNext
  } = _ref;
  const [overflowRef, setOverflowRef] = useState();
  const {
    isScrolledToStart,
    isScrolledToEnd,
    scrollToPrevious,
    scrollToNext
  } = useOverflowScroll({
    childQuerySelector,
    hasInteractiveChildren,
    disableScroll,
    disableOpacityMasks,
    onScrollPrevious,
    onScrollNext,
    overflowRef
  });
  const contextValue = useMemo(() => ({
    overflowRef,
    setOverflowRef,
    isScrolledToStart,
    isScrolledToEnd,
    scrollToPrevious,
    scrollToNext
  }), [overflowRef, setOverflowRef, isScrolledToStart, isScrolledToEnd, scrollToPrevious, scrollToNext]);
  return /*#__PURE__*/React.createElement("div", {
    className: "pgn__overflow-scroll",
    role: "region",
    "aria-label": ariaLabel
  }, /*#__PURE__*/React.createElement(OverflowScrollContext.Provider, {
    value: contextValue
  }, children));
}
OverflowScroll.Items = OverflowScrollItems;
OverflowScroll.propTypes = {
  ariaLabel: PropTypes.string.isRequired,
  children: PropTypes.node.isRequired,
  childQuerySelector: PropTypes.string,
  hasInteractiveChildren: PropTypes.bool,
  disableScroll: PropTypes.bool,
  disableOpacityMasks: PropTypes.bool,
  onScrollPrevious: PropTypes.func,
  onScrollNext: PropTypes.func
};
OverflowScroll.defaultProps = {
  childQuerySelector: undefined,
  disableScroll: false,
  hasInteractiveChildren: false,
  disableOpacityMasks: false,
  onScrollPrevious: undefined,
  onScrollNext: undefined
};
export default OverflowScroll;
//# sourceMappingURL=OverflowScroll.js.map