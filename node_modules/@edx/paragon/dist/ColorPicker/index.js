function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { useCallback, useEffect } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import { HexColorPicker } from 'react-colorful';
import Button from '../Button';
import Form from '../Form';
import ModalPopup from '../Modal/ModalPopup';
import { OverlayTrigger } from '../Overlay';
import Tooltip from '../Tooltip';
import useToggle from '../hooks/useToggle';
function ColorPicker(_ref) {
  let {
    color,
    setColor,
    className,
    size
  } = _ref;
  const [isOpen, open, close] = useToggle(false);
  const [target, setTarget] = React.useState(null);
  const [hexValid, setHexValid] = React.useState(true);
  const validateHex = useCallback(input => {
    const hexRegex = /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/;
    if (input.length > 1 && !input.startsWith('#')) {
      setColor(`#${input}`);
    } else {
      setColor(input);
    }
    if (input === '' || hexRegex.test(input) === true) {
      setHexValid(true);
    } else {
      setHexValid(false);
    }
  }, [setColor]);

  // this is needed for when a user changes the color through the sliders
  useEffect(() => validateHex(color), [validateHex, color]);
  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("span", {
    className: "d-flex"
  }, /*#__PURE__*/React.createElement(OverlayTrigger, {
    placement: "top",
    overlay: /*#__PURE__*/React.createElement(Tooltip, {
      id: "color-picker-tooltip"
    }, "Color picker")
  }, /*#__PURE__*/React.createElement(Button, {
    ref: setTarget,
    className: classNames(className, 'pgn__color-picker', `pgn__color-picker-${size}`),
    style: _objectSpread({}, color && hexValid ? {
      background: `${color}`
    } : {}),
    onClick: open
  }))), /*#__PURE__*/React.createElement(ModalPopup, {
    positionRef: target,
    isOpen: isOpen,
    style: {
      background: 'black'
    },
    onClose: close
  }, /*#__PURE__*/React.createElement("div", {
    className: "pgn__color-modal rounded shadow",
    style: {
      textAlign: 'start'
    }
  }, /*#__PURE__*/React.createElement(HexColorPicker, {
    color: color || '',
    onChange: setColor
  }), /*#__PURE__*/React.createElement(Form.Group, {
    className: "pgn__hex-form",
    size: "sm"
  }, /*#__PURE__*/React.createElement("h5", null, "Hex"), /*#__PURE__*/React.createElement(Form.Control, {
    className: "form-field",
    isInvalid: !hexValid,
    value: color,
    onChange: e => validateHex(e.target.value),
    "data-testid": "hex-input"
  }), !hexValid && /*#__PURE__*/React.createElement(Form.Control.Feedback, {
    className: "pgn__color-error",
    type: "invalid"
  }, "Colors must be in hexadecimal format.")))));
}
ColorPicker.defaultProps = {
  color: '',
  className: undefined,
  size: 'md'
};
ColorPicker.propTypes = {
  /** A default hex code to preset the picker to display. */
  color: PropTypes.string,
  /** Passing setState function allows parent to alter the color. */
  setColor: PropTypes.func.isRequired,
  /** A class name to append to the base element. */
  className: PropTypes.string,
  /** Size of the color picker */
  size: PropTypes.oneOf(['sm', 'md'])
};
export default ColorPicker;
//# sourceMappingURL=index.js.map