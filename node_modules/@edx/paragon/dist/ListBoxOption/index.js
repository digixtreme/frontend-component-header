const _excluded = ["children", "className", "index", "isSelected", "tag"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
export default class ListBoxOption extends React.Component {
  constructor(props) {
    super(props);
    this.onMouseDown = this.onMouseDown.bind(this);
  }
  componentDidUpdate(prevProps) {
    if (this.props.isSelected && !prevProps.isSelected) {
      this.props.onSelect();
    }
  }

  /**
   * onMouseDown is used instead of onClick because onClick triggers the focus
   * event before click event. This focus event bubbles up to the parent
   * (since onFocus bubbles in React), which triggers the ListBox's onFocus function.
   * This function will select the first ListBoxOption if one is not selected, and this
   * causes the user to see the first option selected before their desired option is selected
   * when the click event is fired shortly thereafter. The mouseDown event occurs before the
   * focus event, which prevents this behavior.
   */
  onMouseDown() {
    this.props.onSelect();
  }
  render() {
    const _this$props = this.props,
      {
        children,
        className,
        index,
        isSelected,
        tag
      } = _this$props,
      other = _objectWithoutProperties(_this$props, _excluded);
    return /*#__PURE__*/React.createElement(this.props.tag, _objectSpread({
      'aria-selected': isSelected,
      className: classNames('list-group-item', 'list-group-item-action', {
        active: this.props.isSelected
      }, className),
      id: index === undefined ? null : `list-box-option-${index}`,
      onMouseDown: this.onMouseDown,
      role: 'option'
    }, other), children);
  }
}
ListBoxOption.propTypes = {
  children: PropTypes.node.isRequired,
  className: PropTypes.string,
  index: PropTypes.number,
  isSelected: PropTypes.bool,
  tag: PropTypes.string,
  onSelect: PropTypes.func
};
ListBoxOption.defaultProps = {
  className: undefined,
  index: undefined,
  isSelected: false,
  tag: 'div',
  onSelect: () => {}
};
//# sourceMappingURL=index.js.map