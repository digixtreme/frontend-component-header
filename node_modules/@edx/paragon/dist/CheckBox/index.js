const _excluded = ["inputRef"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import PropTypes from 'prop-types';
import asInput from '../asInput';
import withDeprecatedProps, { DeprTypes } from '../withDeprecatedProps';
class Check extends React.Component {
  constructor(props) {
    super(props);
    this.onChange = this.onChange.bind(this);
    this.state = {
      checked: props.checked || false
    };
  }

  /* eslint-disable react/no-did-update-set-state */
  componentDidUpdate(prevProps) {
    if (prevProps.checked !== this.props.checked) {
      this.setState({
        checked: this.props.checked
      });
    }
  }
  onChange(event) {
    this.setState(prevState => ({
      checked: !prevState.checked
    }));
    this.props.onChange(event);
  }
  render() {
    const _this$props = this.props,
      {
        inputRef
      } = _this$props,
      others = _objectWithoutProperties(_this$props, _excluded);
    return /*#__PURE__*/React.createElement("input", _extends({}, others, {
      type: "checkbox",
      ref: inputRef,
      checked: this.state.checked,
      "aria-checked": this.state.checked,
      onChange: this.onChange
    }));
  }
}
Check.propTypes = {
  // eslint-disable-next-line max-len
  /** (`Boolean`): `true` if the state should be checked, `false` otherwise. This prop can be used to manage the Checkbox more directly, overriding the default Checkbox checked state. */
  checked: PropTypes.bool,
  /** (`Boolean`): `true` if the checkbox should be disabled, `false` otherwise */
  onChange: PropTypes.func,
  /** function to be called when the checkbox changes state */
  inputRef: PropTypes.oneOfType([PropTypes.func, PropTypes.shape({
    current: PropTypes.instanceOf(PropTypes.element)
  })])
};
Check.defaultProps = {
  checked: false,
  onChange: () => {},
  inputRef: undefined
};
const CheckBox = asInput(withDeprecatedProps(Check, 'Checkbox', {
  className: {
    deprType: DeprTypes.FORMAT,
    expect: value => typeof value === 'string',
    transform: value => Array.isArray(value) ? value.join(' ') : value,
    message: 'It should be a string.'
  }
}), 'checkbox', false);
export default CheckBox;
//# sourceMappingURL=index.js.map