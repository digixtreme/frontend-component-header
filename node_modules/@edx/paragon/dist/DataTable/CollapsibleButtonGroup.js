function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { useContext, useMemo, useState } from 'react';
import PropTypes from 'prop-types';
import { MoreVert } from '../../icons';
import useToggle from '../hooks/useToggle';
import useWindowSize from '../hooks/useWindowSize';
import DataTableContext from './DataTableContext';
import Icon from '../Icon';
import IconButton from '../IconButton';
import breakpoints from '../utils/breakpoints';
import ModalPopup from '../Modal/ModalPopup';
import Stack from '../Stack';
import Button from '../Button';
export const ACTION_OVERFLOW_BUTTON_TEXT = 'More actions';
export const SMALL_SCREEN_ACTION_OVERFLOW_BUTTON_TEXT = 'Actions';
function CollapsibleButtonGroup(_ref) {
  let {
    className,
    actions
  } = _ref;
  const [isOverflowMenuOpen, openOverflowMenu, closeOverflowMenu] = useToggle(false);
  const [overflowMenuTarget, setOverflowMenuTarget] = useState(null);
  const {
    controlledTableSelections: [{
      isEntireTableSelected
    }],
    selectedFlatRows,
    rows
  } = useContext(DataTableContext);
  const {
    width
  } = useWindowSize();
  const selectedRows = selectedFlatRows || rows;
  const [visibleActions, dropdownActions] = useMemo(() => {
    if (width < breakpoints.small.minWidth) {
      // On a small screen, all actions will be in the overflow menu
      return [[], [...actions]];
    }
    // The first two actions will be displayed as buttons, the rest will go in an overflow menu
    const firstTwoActions = [...actions].splice(0, 2);
    const extraActions = [...actions].slice(2);

    /*  Reversing the array because to the user it makes sense to put the primary button first,
        but we want it on the right */
    return [firstTwoActions.reverse(), extraActions];
  }, [actions, width]);
  if (!isEntireTableSelected && !selectedRows) {
    return null;
  }
  const cloneAction = (action, index) => /*#__PURE__*/React.cloneElement(action.component, _objectSpread({
    // eslint-disable-next-line react/no-array-index-key
    key: `${action}${index}`,
    as: Button
  }, action.args));
  return /*#__PURE__*/React.createElement("div", {
    className: className
  }, dropdownActions.length > 0 && /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IconButton, {
    variant: "secondary",
    iconAs: Icon,
    src: MoreVert,
    alt: width > breakpoints.small.minWidth ? ACTION_OVERFLOW_BUTTON_TEXT : SMALL_SCREEN_ACTION_OVERFLOW_BUTTON_TEXT,
    id: "actions-dropdown",
    ref: setOverflowMenuTarget,
    onClick: openOverflowMenu
  }), /*#__PURE__*/React.createElement(ModalPopup, {
    positionRef: overflowMenuTarget,
    onClose: closeOverflowMenu,
    placement: "bottom-end",
    isOpen: isOverflowMenuOpen
  }, /*#__PURE__*/React.createElement("div", {
    className: "pgn__datatable__overflow-actions-menu"
  }, /*#__PURE__*/React.createElement(Stack, {
    gap: 2
  }, dropdownActions.map(cloneAction))))), /*#__PURE__*/React.createElement("div", {
    className: "pgn__datatable__visible-actions"
  }, visibleActions.map(cloneAction)));
}
CollapsibleButtonGroup.defaultProps = {
  className: null
};
CollapsibleButtonGroup.propTypes = {
  /** Class names for the div wrapping the button components */
  className: PropTypes.string,
  /** Array of action objects, containing a component and their callback args */
  actions: PropTypes.arrayOf(PropTypes.shape({
    component: PropTypes.oneOfType([PropTypes.func, PropTypes.element]).isRequired,
    args: PropTypes.shape({})
  })).isRequired
};
export default CollapsibleButtonGroup;
//# sourceMappingURL=CollapsibleButtonGroup.js.map