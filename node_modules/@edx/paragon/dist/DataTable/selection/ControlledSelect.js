function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
import React, { useContext, useCallback } from 'react';
import PropTypes from 'prop-types';
import { CheckboxControl } from '../../Form';
import DataTableContext from '../DataTableContext';
import useConvertIndeterminateProp from '../utils/useConvertIndeterminateProp';
import { deleteSelectedRowAction, addSelectedRowAction } from './data/actions';
function ControlledSelect(_ref) {
  let {
    row
  } = _ref;
  const {
    itemCount,
    controlledTableSelections: [, dispatch]
  } = useContext(DataTableContext);
  const toggleSelected = useCallback(() => {
    if (row.isSelected) {
      dispatch(deleteSelectedRowAction(row.id));
    } else {
      dispatch(addSelectedRowAction(row, itemCount));
    }
  }, [itemCount, row, dispatch]);
  const updatedProps = useConvertIndeterminateProp(row.getToggleRowSelectedProps());
  return /*#__PURE__*/React.createElement("div", {
    className: "pgn__data-table__controlled-select"
  }, /*#__PURE__*/React.createElement(CheckboxControl, _extends({}, updatedProps, {
    onChange: toggleSelected
  })));
}
ControlledSelect.propTypes = {
  row: PropTypes.shape({
    id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired,
    getToggleRowSelectedProps: PropTypes.func.isRequired,
    isSelected: PropTypes.bool.isRequired
  }).isRequired
};
export default ControlledSelect;
//# sourceMappingURL=ControlledSelect.js.map