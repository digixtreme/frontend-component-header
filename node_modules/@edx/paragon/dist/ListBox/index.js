const _excluded = ["children", "className", "selectedOptionIndex", "tag"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
/* eslint-disable max-len */
import classNames from 'classnames';
import PropTypes from 'prop-types';
import React from 'react';
import { nonNegativeInteger } from '../utils/propTypes';
export default class ListBox extends React.Component {
  constructor(props) {
    super(props);
    this.onFocus = this.onFocus.bind(this);
    this.onKeyDown = this.onKeyDown.bind(this);
    this.state = {
      selectedOptionIndex: null
    };
  }
  static getDerivedStateFromProps(nextProps, prevState) {
    const {
      selectedOptionIndex
    } = nextProps;
    if (selectedOptionIndex !== prevState.selectedOptionIndex && selectedOptionIndex !== undefined) {
      return {
        selectedOptionIndex
      };
    }
    return null;
  }
  onFocus() {
    // if no ListBoxOption is selected, select first ListBoxOption on ListBox focus
    if (!this.state.selectedOptionIndex) {
      this.setState({
        selectedOptionIndex: 0
      });
    }
  }
  onKeyDown(e) {
    switch (e.key) {
      case 'ArrowDown':
        {
          // prevent scrolling entire modal body with arrow keys
          e.preventDefault();
          if (this.state.selectedOptionIndex < React.Children.count(this.props.children) - 1) {
            this.setState(state => ({
              selectedOptionIndex: state.selectedOptionIndex + 1
            }));
          }
          break;
        }
      case 'ArrowUp':
        {
          // prevent scrolling entire modal body with arrow keys
          e.preventDefault();
          if (this.state.selectedOptionIndex > 0) {
            this.setState(state => ({
              selectedOptionIndex: state.selectedOptionIndex - 1
            }));
          }
          break;
        }
      default:
    }
  }
  renderChildren() {
    return React.Children.map(this.props.children, (child, index) => /*#__PURE__*/React.cloneElement(child, {
      index,
      isSelected: index === this.state.selectedOptionIndex,
      onSelect: () => {
        this.setState({
          selectedOptionIndex: index
        });
        child.props.onSelect();
      }
    }));
  }
  render() {
    const _this$props = this.props,
      {
        children,
        className,
        selectedOptionIndex,
        tag
      } = _this$props,
      other = _objectWithoutProperties(_this$props, _excluded);
    return /*#__PURE__*/React.createElement(this.props.tag, _objectSpread({
      'aria-activedescendant': this.state.selectedOptionIndex === null ? null : `list-box-option-${this.state.selectedOptionIndex}`,
      className: classNames(['list-group', this.props.className]),
      onFocus: this.onFocus,
      onKeyDown: this.onKeyDown,
      role: 'listbox',
      tabIndex: 0
    }, other), this.renderChildren());
  }
}
ListBox.propTypes = {
  /** specifies the ListBoxOption component(s) that will be displayed within the ListBox element. You can pass in one or more ListBoxOption components.
  */
  children: PropTypes.node.isRequired,
  /** specifies Bootstrap class names to apply to the ListBox component. The default is an empty string. */
  className: PropTypes.string,
  /** Although the ListBox component keeps track of which ListBoxOption is selected, `selectedOptionIndex` provides a mechanism for an override, if necessary. An example would be to clear the selectedOption when moving between views. Note that override is not permanent and that clicking on a ListBoxOption or interacting with the ListBox with the keyboard will change the selected ListBoxOption relative to the original override. The default is undefined. */
  selectedOptionIndex: nonNegativeInteger,
  /** used to specify the element type of the rendered ListBox component. The default is div. Example alternatives include ol, ul, span, etc. */
  tag: PropTypes.string
};
ListBox.defaultProps = {
  className: undefined,
  selectedOptionIndex: undefined,
  tag: 'div'
};
//# sourceMappingURL=index.js.map