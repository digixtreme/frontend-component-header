import React, { useMemo } from 'react';
import PropTypes from 'prop-types';
const ModalContext = /*#__PURE__*/React.createContext({
  onClose: () => {}
});
function ModalContextProvider(_ref) {
  let {
    onClose,
    isOpen,
    isBlocking,
    children
  } = _ref;
  const modalContextValue = useMemo(() => ({
    onClose,
    isOpen,
    isBlocking
  }), [onClose, isOpen, isBlocking]);
  return /*#__PURE__*/React.createElement(ModalContext.Provider, {
    value: modalContextValue
  }, children);
}
ModalContextProvider.propTypes = {
  children: PropTypes.node,
  onClose: PropTypes.func.isRequired,
  isBlocking: PropTypes.bool,
  isOpen: PropTypes.bool.isRequired
};
ModalContextProvider.defaultProps = {
  children: null,
  isBlocking: false
};
export { ModalContextProvider };
export default ModalContext;
//# sourceMappingURL=ModalContext.js.map