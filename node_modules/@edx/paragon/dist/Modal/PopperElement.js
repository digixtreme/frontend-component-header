function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React, { useState } from 'react';
import PropTypes from 'prop-types';
import { usePopper } from 'react-popper';
function PopperElement(_ref) {
  let {
    children,
    target,
    strategy,
    placement,
    modifiers
  } = _ref;
  const [popperElement, setPopperElement] = useState(null);
  const popperOptions = {
    modifiers,
    strategy,
    placement
  };
  const {
    styles,
    attributes
  } = usePopper(target, popperElement, popperOptions);
  if (!target) {
    return null;
  }
  return /*#__PURE__*/React.createElement("div", _extends({
    ref: setPopperElement,
    style: _objectSpread(_objectSpread({}, styles.popper), {}, {
      zIndex: 2000
    })
  }, attributes.popper), children);
}
PopperElement.defaultProps = {
  target: undefined
};
PopperElement.propTypes = {
  children: PropTypes.node,
  target: PropTypes.shape({
    current: PropTypes.shape({})
  }),
  strategy: PropTypes.oneOf(['absolute', 'fixed']),
  placement: PropTypes.oneOf(['auto', 'auto-start', 'auto-end', 'top', 'top-start', 'top-end', 'bottom', 'bottom-start', 'bottom-end', 'right', 'right-start', 'right-end', 'left', 'left-start', 'left-end']),
  modifiers: PropTypes.arrayOf(PropTypes.shape({}))
};
PopperElement.defaultProps = {
  children: undefined,
  strategy: 'absolute',
  placement: 'bottom-start',
  modifiers: [{
    name: 'flip',
    enabled: true
  }, {
    name: 'preventOverflow',
    options: {
      tether: false
    }
  }]
};
export default PopperElement;
//# sourceMappingURL=PopperElement.js.map