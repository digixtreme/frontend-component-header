const _excluded = ["children", "icon", "actions", "dismissible", "onClose", "closeLabel", "stacked"];
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useCallback, useEffect, useState } from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
import BaseAlert from 'react-bootstrap/Alert';
import divWithClassName from 'react-bootstrap/divWithClassName';
import { FormattedMessage } from 'react-intl';
import { useMediaQuery } from 'react-responsive';
import Icon from '../Icon';
import breakpoints from '../utils/breakpoints';
import Button from '../Button';
import ActionRow from '../ActionRow';
export const ALERT_CLOSE_LABEL_TEXT = 'Dismiss';
const Alert = /*#__PURE__*/React.forwardRef((_ref, ref) => {
  let {
      children,
      icon,
      actions,
      dismissible,
      onClose,
      closeLabel,
      stacked
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const [isStacked, setIsStacked] = useState(stacked);
  const isExtraSmall = useMediaQuery({
    maxWidth: breakpoints.extraSmall.maxWidth
  });
  const actionButtonSize = 'sm';
  useEffect(() => {
    if (isExtraSmall) {
      setIsStacked(true);
    } else {
      setIsStacked(stacked);
    }
  }, [isExtraSmall, stacked]);
  const cloneActionElement = useCallback(Action => {
    const addtlActionProps = {
      size: actionButtonSize,
      key: Action.props.children
    };
    return /*#__PURE__*/React.cloneElement(Action, addtlActionProps);
  }, []);
  return /*#__PURE__*/React.createElement(BaseAlert, _extends({}, props, {
    className: classNames('alert-content', props.className),
    ref: ref
  }), icon && /*#__PURE__*/React.createElement(Icon, {
    src: icon,
    className: "alert-icon"
  }), /*#__PURE__*/React.createElement("div", {
    className: classNames({
      'pgn__alert-message-wrapper': !isStacked,
      'pgn__alert-message-wrapper-stacked': isStacked
    })
  }, /*#__PURE__*/React.createElement("div", {
    className: "alert-message-content"
  }, children), (dismissible || actions?.length > 0) && /*#__PURE__*/React.createElement(ActionRow, {
    className: "pgn__alert-actions"
  }, /*#__PURE__*/React.createElement(ActionRow.Spacer, null), dismissible && /*#__PURE__*/React.createElement(Button, {
    size: actionButtonSize,
    variant: "tertiary",
    onClick: onClose
  }, closeLabel || /*#__PURE__*/React.createElement(FormattedMessage, {
    id: "pgn.Alert.closeLabel",
    defaultMessage: "Dismiss",
    description: "Label of a close button on Alert component"
  })), actions && actions.map(cloneActionElement))));
});

// This is needed to display a default prop for Alert.Heading element
// Copied from react-bootstrap since BaseAlert.Heading component doesn't have defaultProps,
// so there seems to be no other way of providing correct default prop for base element
const DivStyledAsH4 = divWithClassName('h4');
DivStyledAsH4.displayName = 'DivStyledAsH4';
function AlertHeading(props) {
  return /*#__PURE__*/React.createElement(BaseAlert.Heading, props);
}
function AlertLink(props) {
  return /*#__PURE__*/React.createElement(BaseAlert.Link, props);
}
const commonPropTypes = {
  /** Specifies the base element */
  as: PropTypes.elementType,
  /** Overrides underlying component base CSS class name */
  bsPrefix: PropTypes.string
};
AlertLink.propTypes = commonPropTypes;
AlertHeading.propTypes = commonPropTypes;
AlertLink.defaultProps = {
  as: 'a',
  bsPrefix: 'alert-link'
};
AlertHeading.defaultProps = {
  as: DivStyledAsH4,
  bsPrefix: 'alert-heading'
};
Alert.propTypes = _objectSpread(_objectSpread({}, BaseAlert.propTypes), {}, {
  /** Docstring for the children prop */
  children: PropTypes.node,
  /** Docstring for the icon prop... Icon that will be shown in the alert */
  icon: PropTypes.func,
  /** Whether the alert is shown. */
  show: PropTypes.bool,
  /** Whether the alert is dismissible. Defaults to true. */
  dismissible: PropTypes.bool,
  /** Optional callback function for when the alert it dismissed. */
  onClose: PropTypes.func,
  /** Optional list of action elements. May include, at most, 2 actions, or 1 if dismissible is true. */
  actions: PropTypes.arrayOf(PropTypes.element),
  /** Position of the dismiss and call-to-action buttons. Defaults to ``false``. */
  stacked: PropTypes.bool,
  /** Sets the text for alert close button, defaults to 'Dismiss'. */
  closeLabel: PropTypes.oneOfType([PropTypes.string, PropTypes.element])
});
Alert.defaultProps = _objectSpread(_objectSpread({}, BaseAlert.defaultProps), {}, {
  children: undefined,
  icon: undefined,
  actions: undefined,
  dismissible: false,
  onClose: () => {},
  closeLabel: undefined,
  show: true,
  stacked: false
});
Alert.Heading = AlertHeading;
Alert.Link = AlertLink;
export default Alert;
//# sourceMappingURL=index.js.map