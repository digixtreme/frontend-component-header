const _excluded = ["children", "className", "moreTabText", "defaultActiveKey", "activeKey"],
  _excluded2 = ["title", "notification", "tabClassName"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React, { useEffect, useMemo, useRef } from 'react';
import BaseTabs from 'react-bootstrap/Tabs';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import TabsDeprecated from './deprecated';
import Bubble from '../Bubble';
import Dropdown from '../Dropdown';
import useIndexOfLastVisibleChild from '../hooks/useIndexOfLastVisibleChild';
import Tab from './Tab';
export const MORE_TAB_TEXT = 'More...';
function Tabs(_ref) {
  let {
      children,
      className,
      moreTabText = MORE_TAB_TEXT,
      defaultActiveKey,
      activeKey
    } = _ref,
    props = _objectWithoutProperties(_ref, _excluded);
  const containerElementRef = useRef(null);
  const overflowElementRef = useRef(null);
  const indexOfLastVisibleChild = useIndexOfLastVisibleChild(containerElementRef.current?.children[0], overflowElementRef.current?.parentNode);
  useEffect(() => {
    if (containerElementRef.current) {
      const observer = new MutationObserver(mutations => {
        mutations.forEach(mutation => {
          // React-Bootstrap attribute 'data-rb-event-key' is responsible for the tab identification
          const eventKey = mutation.target.getAttribute('data-rb-event-key');
          // React-Bootstrap attribute 'aria-selected' is responsible for selected/unselected state
          const isActive = mutation.target.getAttribute('aria-selected') === 'true';
          // datakey attribute is added manually to the dropdown
          // elements so that they correspond to the native tabs' eventKey
          const element = containerElementRef.current.querySelector(`[datakey='${eventKey}']`);
          const moreTab = containerElementRef.current.querySelector('.pgn__tab_more');
          if (isActive) {
            element?.classList.add('active');
            // Here we add active class to the 'More Tab' if element exists in the dropdown
            if (element) {
              moreTab.classList.add('active');
            } else {
              moreTab.classList.remove('active');
            }
          } else {
            element?.classList.remove('active');
          }
        });
      });
      observer.observe(containerElementRef.current, {
        attributes: true,
        subtree: true,
        attributeFilter: ['aria-selected']
      });
      return () => observer.disconnect();
    }
    return undefined;
  }, []);
  useEffect(() => {
    if (overflowElementRef.current?.parentNode) {
      overflowElementRef.current.parentNode.tabIndex = -1;
    }
  }, [overflowElementRef.current?.parentNode]);
  const handleDropdownTabClick = eventKey => {
    const hiddenTab = containerElementRef.current.querySelector(`[data-rb-event-key='${eventKey}']`);
    hiddenTab.click();
  };
  const tabsChildren = useMemo(() => {
    const indexOfOverflowStart = indexOfLastVisibleChild + 1;
    const childrenList = React.Children.map(children, (child, index) => {
      if (child?.type?.name !== 'Tab' && process.env.NODE_ENV === 'development') {
        // eslint-disable-next-line no-console
        console.error(`Tabs children can only be of type Tab. ${children[index]} was passed instead.`);
      }
      if (! /*#__PURE__*/React.isValidElement(child)) {
        return child;
      }
      const _child$props = child.props,
        {
          title,
          notification,
          tabClassName
        } = _child$props,
        rest = _objectWithoutProperties(_child$props, _excluded2);
      let newTitle;
      if (notification) {
        newTitle = /*#__PURE__*/React.createElement(React.Fragment, null, title, /*#__PURE__*/React.createElement(Bubble, {
          variant: "error",
          role: "status",
          className: "pgn__tab-notification",
          expandable: true
        }, notification));
      } else {
        newTitle = title;
      }
      const tabClass = index > indexOfLastVisibleChild ? 'pgn__tab_invisible' : '';
      const modifiedTab = /*#__PURE__*/React.cloneElement(child, _objectSpread(_objectSpread({}, rest), {}, {
        title: newTitle,
        tabClassName: classNames(tabClass, tabClassName)
      }));
      return modifiedTab;
    });
    let moreTabHasNotification = false;
    const overflowChildren = childrenList.slice(indexOfOverflowStart).map(overflowChild => {
      if (!moreTabHasNotification && overflowChild.props.notification) {
        moreTabHasNotification = true;
      }
      return /*#__PURE__*/React.createElement(Dropdown.Item, {
        key: `${overflowChild.props.eventKey}overflow`,
        onClick: () => handleDropdownTabClick(overflowChild.props.eventKey),
        disabled: overflowChild.props.disabled,
        datakey: overflowChild.props.eventKey,
        className: classNames({
          active: overflowChild.props.eventKey === defaultActiveKey || overflowChild.props.eventKey === activeKey
        }, 'pgn__tabs__dropdown-item')
      }, overflowChild.props.title);
    });
    childrenList.splice(indexOfOverflowStart, 0, /*#__PURE__*/React.createElement(Tab, {
      key: "moreTabKey",
      tabClassName: classNames(!overflowChildren.length && 'pgn__tab_invisible', 'pgn__tab_more'),
      title: /*#__PURE__*/React.createElement(Dropdown, {
        ref: overflowElementRef
      }, /*#__PURE__*/React.createElement(Dropdown.Toggle, {
        variant: "link",
        className: "nav-link",
        id: "pgn__tab-toggle"
      }, moreTabText, moreTabHasNotification && /*#__PURE__*/React.createElement(Bubble, {
        variant: "error",
        role: "status",
        className: "pgn__tab-notification"
      })), /*#__PURE__*/React.createElement(Dropdown.Menu, {
        className: "dropdown-menu-right"
      }, overflowChildren))
    }));
    return childrenList;
  }, [activeKey, children, defaultActiveKey, indexOfLastVisibleChild, moreTabText]);
  return /*#__PURE__*/React.createElement("div", {
    ref: containerElementRef
  }, /*#__PURE__*/React.createElement(BaseTabs, _extends({
    defaultActiveKey: defaultActiveKey,
    activeKey: activeKey
  }, props, {
    className: classNames(className, 'pgn__tabs')
  }), tabsChildren));
}
Tabs.propTypes = {
  /** Specifies elements that is processed to create tabs. */
  children: PropTypes.node.isRequired,
  /** Specifies class name to append to the base element. */
  className: PropTypes.string,
  /** Specifies text for the 'More' tab. */
  moreTabText: PropTypes.string,
  /** Specifies default active tab (uncontrolled usage). */
  defaultActiveKey: PropTypes.string,
  /** Specifies active tab (controlled usage). */
  activeKey: PropTypes.string
};
Tabs.defaultProps = {
  className: undefined,
  moreTabText: MORE_TAB_TEXT,
  defaultActiveKey: undefined,
  activeKey: undefined
};
Tabs.Deprecated = TabsDeprecated;
export default Tabs;
export { Tab };
export { default as TabContainer } from 'react-bootstrap/TabContainer';
export { default as TabContent } from 'react-bootstrap/TabContent';
export { default as TabPane } from 'react-bootstrap/TabPane';
//# sourceMappingURL=index.js.map