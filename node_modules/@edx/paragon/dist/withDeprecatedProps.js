const _excluded = ["children"];
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
/* eslint no-console: 0 */
import React from 'react';
export let DeprTypes;
(function (DeprTypes) {
  DeprTypes["MOVED"] = "MOVED";
  DeprTypes["REMOVED"] = "REMOVED";
  DeprTypes["FORMAT"] = "FORMAT";
  DeprTypes["MOVED_AND_FORMAT"] = "MOVED_AND_FORMAT";
})(DeprTypes || (DeprTypes = {}));
function withDeprecatedProps(WrappedComponent, componentName, deprecatedProps) {
  class WithDeprecatedProps extends React.Component {
    constructor(props) {
      super(props);
      this.transformProps = this.transformProps.bind(this);
    }
    warn(message) {
      if (process.env.NODE_ENV === 'development') {
        if (console) {
          console.warn(`[Deprecated] ${message}`);
        }
      }
    }
    transformProps(acc, propName) {
      if (deprecatedProps[propName] === undefined) {
        acc[propName] = this.props[propName];
        return acc;
      }
      const {
        deprType,
        newName,
        expect,
        transform,
        message
      } = deprecatedProps[propName];
      switch (deprType) {
        case DeprTypes.MOVED:
          this.warn(`${componentName}: The prop '${propName}' has been moved to '${newName}'.`);
          acc[newName] = this.props[propName];
          break;
        case DeprTypes.REMOVED:
          this.warn(`${componentName}: The prop '${propName}' has been removed. '${message}'`);
          break;
        case DeprTypes.FORMAT:
          if (!expect(this.props[propName])) {
            this.warn(`${componentName}: The prop '${propName}' expects a new format. ${message}`);
            acc[propName] = transform(this.props[propName], this.props);
          } else {
            acc[propName] = this.props[propName];
          }
          break;
        case DeprTypes.MOVED_AND_FORMAT:
          this.warn(`${componentName}: The prop '${propName}' has been moved to '${newName}' and expects a new format. ${message}`);
          acc[newName] = transform(this.props[propName], this.props);
          break;
        default:
          acc[propName] = this.props[propName];
          break;
      }
      return acc;
    }
    render() {
      const _Object$keys$reduce = Object.keys(this.props).reduce(this.transformProps, {}),
        {
          children
        } = _Object$keys$reduce,
        transformedProps = _objectWithoutProperties(_Object$keys$reduce, _excluded);
      return /*#__PURE__*/React.createElement(WrappedComponent, transformedProps, this.props.children || children);
    }
  }
  // eslint-disable-next-line react/static-property-placement
  _defineProperty(WithDeprecatedProps, "displayName", `withDeprecatedProps(${componentName})`);
  return WithDeprecatedProps;
}
export default withDeprecatedProps;
//# sourceMappingURL=withDeprecatedProps.js.map