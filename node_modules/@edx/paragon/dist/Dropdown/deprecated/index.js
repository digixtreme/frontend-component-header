const _excluded = ["children"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
import React from 'react';
import PropTypes from 'prop-types';
import classNames from 'classnames';
// eslint-disable-next-line import/no-cycle
import DropdownButton from './DropdownButton';
// eslint-disable-next-line import/no-cycle
import DropdownMenu from './DropdownMenu';
import DropdownItem from './DropdownItem';
import withDeprecatedProps, { DeprTypes } from '../../withDeprecatedProps';
const {
  Provider,
  Consumer
} = /*#__PURE__*/React.createContext();
class Dropdown extends React.Component {
  // For creating unique ids

  constructor(props) {
    super(props);
    _defineProperty(this, "handleDocumentClick", e => {
      if (this.containerRef.current.contains(e.target) && this.containerRef.current !== e.target) {
        return;
      }
      if (this.state.open) {
        this.close();
      }
    });
    _defineProperty(this, "handleMenuKeyDown", e => {
      switch (e.key) {
        case 'ArrowUp':
          e.preventDefault();
          this.focusPrevious();
          break;
        case 'ArrowDown':
          e.preventDefault();
          this.focusNext();
          break;
        case 'Tab':
          e.preventDefault();
          if (e.shiftKey) {
            this.focusPrevious();
          } else {
            this.focusNext();
          }
          break;
        case 'Escape':
          e.stopPropagation();
          this.close();
          break;
        default:
          break;
      }
    });
    _defineProperty(this, "toggle", () => {
      if (this.state.open) {
        this.close();
      } else {
        this.open();
      }
    });
    this.state = {
      open: false
    };

    // Used for aria labelling. Increment the id counter so the next id can be unique
    this.uniqueId = Dropdown.idCounter;
    Dropdown.idCounter += 1;
    this.triggerId = `pgn__dropdown-trigger-${this.uniqueId}`;
    this.containerRef = /*#__PURE__*/React.createRef();
    this.menuRef = /*#__PURE__*/React.createRef();
    this.buttonRef = /*#__PURE__*/React.createRef();
  }
  componentDidUpdate(prevProps, prevState) {
    if (prevState.open !== this.state.open) {
      if (this.state.open) {
        this.focusFirst();
      } else {
        this.buttonRef.current.focus();
      }
    }
  }
  componentWillUnmount() {
    document.removeEventListener('click', this.handleDocumentClick, true);
  }
  getFocusableElements() {
    const selector = 'button:not([disabled]), [href]:not([disabled]), input:not([disabled]), select:not([disabled]), textarea:not([disabled]), [tabindex]:not([tabindex="-1"]):not([disabled])';
    return Array.from(this.menuRef.current.querySelectorAll(selector));
  }
  close() {
    document.removeEventListener('click', this.handleDocumentClick, true);
    this.setState({
      open: false
    });
  }
  open() {
    // adding event listener here so the user can close dropdown on click outside of the dropdown
    document.addEventListener('click', this.handleDocumentClick, true);
    this.setState({
      open: true
    });
  }
  focusFirst() {
    const focusableElements = this.getFocusableElements();
    if (focusableElements.length) {
      focusableElements[0].focus();
    }
  }
  focusNext() {
    const allFocusableElements = this.getFocusableElements();
    if (allFocusableElements.length === 0) {
      return;
    }
    const activeIndex = allFocusableElements.indexOf(document.activeElement);
    const nextIndex = (activeIndex + 1) % allFocusableElements.length;
    allFocusableElements[nextIndex].focus();
  }
  focusPrevious() {
    const allFocusableElements = this.getFocusableElements();
    if (allFocusableElements.length === 0) {
      return;
    }
    const activeIndex = allFocusableElements.indexOf(document.activeElement);
    const previousIndex = (activeIndex - 1 + allFocusableElements.length) % allFocusableElements.length;
    allFocusableElements[previousIndex].focus();
  }
  render() {
    const _this$props = this.props,
      {
        children
      } = _this$props,
      other = _objectWithoutProperties(_this$props, _excluded);
    return /*#__PURE__*/React.createElement("div", _extends({}, other, {
      className: classNames('dropdown', {
        show: this.state.open
      }, other.className),
      ref: this.containerRef
    }), /*#__PURE__*/React.createElement(Provider, {
      value: {
        buttonRef: this.buttonRef,
        handleMenuKeyDown: this.handleMenuKeyDown,
        isOpen: this.state.open,
        menuRef: this.menuRef,
        toggle: this.toggle,
        triggerId: this.triggerId
      }
    }, children));
  }
}
// eslint-disable-next-line react/sort-comp
_defineProperty(Dropdown, "idCounter", 0);
Dropdown.propTypes = {
  children: PropTypes.node
};
Dropdown.Item = DropdownItem;
Dropdown.Button = DropdownButton;
Dropdown.Menu = DropdownMenu;
const DropdownWithDeprecatedProps = withDeprecatedProps(Dropdown, 'Dropdown', {
  menuItems: {
    deprType: DeprTypes.MOVED_AND_FORMAT,
    message: 'They should be components sent as children.',
    newName: 'children',
    transform: (menuItems, allProps) => {
      if (!Array.isArray(menuItems)) {
        return null;
      }
      return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(DropdownButton, null, /*#__PURE__*/React.isValidElement(allProps.iconElement) ? allProps.iconElement : null, allProps.title), /*#__PURE__*/React.createElement(DropdownMenu, null, menuItems.map((menuItem, i) => {
        /* eslint-disable react/no-array-index-key */
        if ( /*#__PURE__*/React.isValidElement(menuItem)) {
          return /*#__PURE__*/React.cloneElement(menuItem, {
            className: 'dropdown-item',
            key: i
          });
        }
        return /*#__PURE__*/React.createElement(DropdownItem, {
          key: i,
          href: menuItem.href
        }, menuItem.label);
        /* eslint-enable react/no-array-index-key */
      })));
    }
  },

  title: {
    deprType: DeprTypes.REMOVED,
    message: 'It should be specified inside the Dropdown.Button component'
  },
  buttonType: {
    deprType: DeprTypes.REMOVED,
    message: 'It should be specified as a className prop'
  },
  iconElement: {
    deprType: DeprTypes.REMOVED,
    message: 'It should be specified inside the buttonContent prop.'
  }
});
DropdownWithDeprecatedProps.propTypes = Dropdown.propTypes;
DropdownWithDeprecatedProps.defaultProps = Dropdown.defaultProps;
DropdownWithDeprecatedProps.Item = Dropdown.Item;
DropdownWithDeprecatedProps.Button = Dropdown.Button;
DropdownWithDeprecatedProps.Menu = Dropdown.Menu;
export { Provider, Consumer };
export default DropdownWithDeprecatedProps;
//# sourceMappingURL=index.js.map