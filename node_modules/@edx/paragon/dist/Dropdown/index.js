const _excluded = ["show", "autoClose", "onToggle", "variant", "className"],
  _excluded2 = ["as", "bsPrefix"],
  _excluded3 = ["className"];
function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }
function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }
function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }
import React from 'react';
import classNames from 'classnames';
import PropTypes from 'prop-types';
import BaseDropdown from 'react-bootstrap/Dropdown';
import DropdownMenu from 'react-bootstrap/DropdownMenu';
import BaseDropdownItem from 'react-bootstrap/DropdownItem';
import BaseDropdownToggle from 'react-bootstrap/DropdownToggle';
import DropdownDeprecated from './deprecated';
import Button from '../Button';
import IconButton from '../IconButton';
const Dropdown = /*#__PURE__*/React.forwardRef(
// eslint-disable-next-line prefer-arrow-callback
function Dropdown(_ref, ref) {
  let {
      show,
      autoClose,
      onToggle,
      variant,
      className
    } = _ref,
    rest = _objectWithoutProperties(_ref, _excluded);
  const [internalShow, setInternalShow] = React.useState(show);
  const isClosingPermitted = source => {
    // autoClose=false only permits close on button click
    if (autoClose === false) {
      return source === 'click';
    }
    // autoClose=inside doesn't permit close on rootClose
    if (autoClose === 'inside') {
      return source !== 'rootClose';
    }
    // autoClose=outside doesn't permit close on select
    if (autoClose === 'outside') {
      return source !== 'select';
    }
    return true;
  };
  const handleToggle = (isOpen, event, metadata) => {
    if (isOpen) {
      setInternalShow(true);
      onToggle?.(isOpen, event, metadata);
      return;
    }
    let {
      source
    } = _objectSpread({}, metadata);
    if (event.currentTarget === document && (source !== 'keydown' || event.key === 'Escape')) {
      source = 'rootClose';
    }
    if (isClosingPermitted(source)) {
      setInternalShow(false);
      onToggle?.(isOpen, event, metadata);
    }
  };
  return /*#__PURE__*/React.createElement(BaseDropdown, _extends({
    className: classNames('pgn__dropdown', `pgn__dropdown-${variant}`, className),
    "data-testid": "dropdown",
    onToggle: handleToggle,
    ref: ref,
    show: internalShow
  }, rest));
});
Dropdown.propTypes = {
  autoClose: PropTypes.oneOfType([PropTypes.string, PropTypes.bool]),
  className: PropTypes.string,
  onToggle: PropTypes.func,
  show: PropTypes.bool,
  variant: PropTypes.oneOf(['light', 'dark'])
};
Dropdown.defaultProps = {
  autoClose: true,
  className: '',
  onToggle: undefined,
  show: false,
  variant: 'light'
};
const DropdownToggle = /*#__PURE__*/React.forwardRef(
// eslint-disable-next-line prefer-arrow-callback
function DropdownToggle(_ref2, ref) {
  let {
      as,
      bsPrefix
    } = _ref2,
    otherProps = _objectWithoutProperties(_ref2, _excluded2);
  // hide arrow from the toggle if it is rendered as IconButton
  // because it hinders the positioning of IconButton
  const prefix = as === IconButton ? 'pgn__dropdown-toggle-iconbutton' : bsPrefix;
  return /*#__PURE__*/React.createElement(BaseDropdownToggle, _extends({}, otherProps, {
    as: as,
    bsPrefix: prefix,
    ref: ref
  }));
});
DropdownToggle.propTypes = {
  /** Specifies the base element. */
  as: PropTypes.elementType,
  /** Overrides underlying component base CSS class name. */
  bsPrefix: PropTypes.string,
  /** An html id attribute, necessary for assistive technologies, such as screen readers. */
  id: PropTypes.oneOfType([PropTypes.string, PropTypes.number]).isRequired
};
DropdownToggle.defaultProps = {
  as: Button,
  bsPrefix: 'dropdown-toggle'
};
Dropdown.Item = /*#__PURE__*/React.forwardRef(
// eslint-disable-next-line prefer-arrow-callback
function DropdownItem(_ref3, ref) {
  let {
      className
    } = _ref3,
    otherProps = _objectWithoutProperties(_ref3, _excluded3);
  return /*#__PURE__*/React.createElement(BaseDropdownItem, _extends({
    className: classNames(className, 'pgn__dropdown-item'),
    ref: ref
  }, otherProps));
});
Dropdown.Item.propTypes = {
  className: PropTypes.string
};
Dropdown.Item.defaultProps = {
  className: undefined
};
Dropdown.Deprecated = DropdownDeprecated;
Dropdown.Toggle = DropdownToggle;
Dropdown.Menu = DropdownMenu;
Dropdown.Header = BaseDropdown.Header;
Dropdown.Divider = BaseDropdown.Divider;
export default Dropdown;
export { DropdownToggle };
export { default as DropdownButton } from 'react-bootstrap/DropdownButton';
export { default as SplitButton } from 'react-bootstrap/SplitButton';
//# sourceMappingURL=index.js.map